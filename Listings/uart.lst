C51 COMPILER V9.57.0.0   UART                                                              06/18/2018 16:09:32 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\keil4_c51\C51\BIN\C51.EXE src\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "poe_m.h"
   2          #include "uart.h"
   3          #include "string.h"
   4          
   5          
   6          uint8_t code CMD_Write[] = "write 1=";
   7          uint8_t code CMD_Read[] = "read 1=";
   8          uint8_t code CMD_Ver[] = "ver\n";
   9          uint8_t code CMD_Load[] = "#load\n";
  10          
  11          uint16_t xdata sdet = 0;
  12          
  13          static const uint8_t UART1_OVTIME = 100;  //usrt rx over time
  14          
  15          // global variable
  16          static uint8_t xdata TX1_Read=0;    //tx read pointer 
  17          static uint8_t xdata TX1_Write=0; //tx write pointer
  18          static uint8_t xdata TX1_Buffer[TX1_LENGTH];  //tx buffer
  19          volatile bit B_TX1_Busy;  //sending busy flag
  20          uint8_t xdata RX1_Timer;
  21          static volatile uint8_t xdata RX1_Write=0;  //tx write pointer
  22          volatile uint8_t xdata RX1_Buffer[RX1_LENGTH];  //rx buffer
  23          volatile bit B_RX1_OK;  //receive complete flag
  24          
  25          // private function
  26          static void SetTimer2Baudrate(uint16_t dat);
  27          
  28          //========================================================================
  29          // function:    SetTimer2Baudrate(u16 dat)
  30          // description: timer2 for buadrate generator
  31          // parameter:   dat:Timer2 reload
  32          // return:      void
  33          // version:     V1.0, 2018-1-11
  34          //========================================================================
  35          static void SetTimer2Baudrate(uint16_t dat){
  36   1        AUXR &= ~(1<<4);  //Timer stop
  37   1        AUXR &= ~(1<<3);  //Timer2 set As Timer
  38   1        AUXR |=  (1<<2);  //Timer2 set as 1T mode
  39   1        TH2 = dat / 256;
  40   1        TL2 = dat % 256;
  41   1        IE2  &= ~(1<<2);  //disable interrupt_
  42   1        AUXR |=  (1<<4);  //Timer run enable
  43   1      }
  44          
  45          //========================================================================
  46          // function:    UART1_config
  47          // description: init config UART1
  48          // parameter:   void
  49          // return:      void
  50          // version:     V1.0, 2018-1-11
  51          //========================================================================
  52          void  UART1_config(void){
  53   1        /*********** timer2 for baudrate *****************/
  54   1        AUXR |= 0x01;   //S1 BRT Use Timer2;
C51 COMPILER V9.57.0.0   UART                                                              06/18/2018 16:09:32 PAGE 2   

  55   1        SetTimer2Baudrate(65536UL - (MAIN_Fosc>>2) / Baudrate1);
  56   1      
  57   1        /*********** timer1 for baudrate *****************/
  58   1      /*  
  59   1        TR1 = 0;
  60   1        AUXR &= ~0x01;    //S1 BRT Use Timer1;
  61   1        AUXR |=  (1<<6);  //Timer1 set as 1T mode
  62   1        TMOD &= ~(1<<6);  //Timer1 set As Timer
  63   1        TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  64   1        TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
  65   1        TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
  66   1        ET1 = 0;  //disable interrupt_
  67   1        INT_CLKO &= ~0x02;  //disable output clock
  68   1        TR1  = 1;
  69   1      */
  70   1      
  71   1        SCON = (SCON & 0x3f) | 0x40;  //mode 0x00: sync, 0x40: 8bit_variableBuad, 0x80: 9bit_fixedbuad  0xc0: 9bit
             -_variableBuad
  72   1        PS  = 1;  //interrupt_ priority
  73   1        ES  = 1;  //enable interrupt_
  74   1        REN = 1;  //enable receive
  75   1        P_SW1 &= 0x3f;
  76   1        P_SW1 |= 0x00;  //UART1 switch to, 0x00: P3.0_P3.1, 0x40: P3.6_P3.7, 0x80: P1.6_P1.7 (must use interal clo
             -ck)
  77   1        AUXR2 |=  (1<<4); //RXDLNTXD,1:link,0:normal
  78   1      
  79   1        B_TX1_Busy = 0;
  80   1        TX1_Read   = 0;
  81   1        TX1_Write  = 0;
  82   1      }
  83          
  84          //========================================================================
  85          // function:    uart1_handle
  86          // description: uart1 interrupt_ service handle
  87          // parameter:   void
  88          // return:      void
  89          // version:     V1.0, 2018-1-11
  90          //========================================================================
  91          void uart1_handle (void) interrupt 4{
  92   1        uint8_t tem_psw2 = P_SW2;
  93   1        EAXRAM();
  94   1        while(RI){  //"while" instead of "if" to use "break" later
  95   2          static uint8_t temp = 0;
  96   2          RI = 0;
  97   2          temp = SBUF;
  98   2          if(B_RX1_OK || '\r'==temp) break;
  99   2          RX1_Buffer[RX1_Write++] = temp;
 100   2          if('\n'==temp || (RX1_LENGTH-1)==RX1_Write){
 101   3            B_RX1_OK = 1;
 102   3            RX1_Buffer[RX1_Write] = '\0';
 103   3            RX1_Write = 0;
 104   3          }
 105   2        }
 106   1      
 107   1        if(TI){
 108   2          TI = 0;
 109   2          B_TX1_Busy = 0;
 110   2        }
 111   1        P_SW2 = tem_psw2;
 112   1      }
 113          
 114          //========================================================================
C51 COMPILER V9.57.0.0   UART                                                              06/18/2018 16:09:32 PAGE 3   

 115          // function:    UART1_RxProcess
 116          // description: check cmd to process
 117          // parameter:   void
 118          // return:      void
 119          // version:     V2.0, 2018-6-18
 120          //========================================================================
 121          void UART1_RxProcess(void){
 122   1        if(!B_RX1_OK) return;
 123   1        if(0 == strncmp(RX1_Buffer, CMD_Ver, strlen(CMD_Ver))){
 124   2          RX1_Write=0;
 125   2          B_RX1_OK=0;
 126   2          PrintString1(PRJ_NAME);
 127   2          PrintString1(SW_VER);
 128   2          PrintString1(HW_VER);
 129   2          PrintString1(__DATE__"\n");
 130   2          PrintString1(__TIME__"\n");
 131   2        }
 132   1        else if(0 == strncmp(RX1_Buffer, CMD_Write, strlen(CMD_Write))){
 133   2          RX1_Write=0;
 134   2          B_RX1_OK=0;
 135   2        }
 136   1        else if(0 == strncmp(RX1_Buffer, CMD_Read, strlen(CMD_Read))){
 137   2          RX1_Write=0;
 138   2          B_RX1_OK=0;
 139   2        }
 140   1        else if(0 == strncmp(RX1_Buffer, CMD_Load, strlen(CMD_Load))){
 141   2          RX1_Write=0;
 142   2          B_RX1_OK=0;
 143   2          IAP_CONTR = 0x60;
 144   2        }
 145   1      }
 146          
 147          //========================================================================
 148          // function:    UART1_TxProcess
 149          // description: check data_ to send in infinite loop
 150          // parameter:   void
 151          // return:      void
 152          // version:     V1.0, 2018-1-11
 153          //========================================================================
 154          void UART1_TxProcess(void){
 155   1        if((TX1_Read != TX1_Write) && (!B_TX1_Busy)){ //have data_ && uart idle
 156   2          SBUF = TX1_Buffer[TX1_Read];
 157   2          B_TX1_Busy = 1;
 158   2          if(++TX1_Read >= TX1_LENGTH)
 159   2            TX1_Read = 0;
 160   2        }
 161   1      }
 162          
 163          //========================================================================
 164          // function:    TX1_write2buff(uint8_t dat)
 165          // description: write data_ in buffer to wait send
 166          // parameter:   byte data_
 167          // return:      void
 168          // version:     V1.0, 2018-1-11
 169          //========================================================================
 170          void TX1_write2buff(uint8_t dat){
 171   1        TX1_Buffer[TX1_Write] = dat;
 172   1        if(++TX1_Write >= TX1_LENGTH)
 173   1          TX1_Write = 0;
 174   1      }
 175          
 176          //========================================================================
C51 COMPILER V9.57.0.0   UART                                                              06/18/2018 16:09:32 PAGE 4   

 177          // function:    PrintString1(uint8_t *str)
 178          // description: write a string to buffer
 179          // parameter:   string must be end of '\0'
 180          // return:      void
 181          // version:     V1.0, 2018-1-11
 182          //========================================================================
 183          void PrintString1(uint8_t* str){
 184   1        for (; *str != 0; str++)
 185   1          TX1_write2buff(*str); //end of '\0'
 186   1      }
 187          
 188          //========================================================================
 189          // function:    uart1 monitor
 190          // description: check uart1 timeout
 191          // parameter:   tick
 192          // return:      void
 193          // version:     V1.0, 2018-1-11
 194          //========================================================================
 195          void timeEv_UARTRx1Rst(uint8_t tick){
 196   1        static uint16_t uartrst_tick = 0;
 197   1        if(0 == RX1_Write){
 198   2          uartrst_tick = 0;
 199   2          return;
 200   2        }
 201   1        uartrst_tick += tick;
 202   1        if(uartrst_tick > UART1_OVTIME){
 203   2          uartrst_tick = 0;
 204   2          RX1_Write = 0;
 205   2        }
 206   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    528    ----
   CONSTANT SIZE    =     87    ----
   XDATA SIZE       =    218    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
