C51 COMPILER V9.57.0.0   UART                                                              05/28/2018 21:11:51 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\keil4_c51\C51\BIN\C51.EXE src\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND P
                    -RINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "poe_m.h"
   2          #include "uart.h"
   3          #include "string.h"
   4          
   5          
   6          uint8_t code CMD_Write[] = "write 1=";
   7          uint8_t code CMD_Read[] = "read 1=";
   8          uint8_t code CMD_Ver[] = "ver\n";
   9          
  10          uint16_t xdata sdet = 0;
  11          
  12          static const uint8_t UART1_OVTIME = 100;  //usrt rx over time
  13          
  14          // global variable
  15          static uint8_t xdata TX1_Read=0;    //tx read pointer 
  16          static uint8_t xdata TX1_Write=0; //tx write pointer
  17          static uint8_t xdata TX1_Buffer[TX1_LENGTH];  //tx buffer
  18          volatile bit B_TX1_Busy;  //sending busy flag
  19          uint8_t xdata RX1_Timer;
  20          static volatile uint8_t xdata RX1_Write=0;  //tx write pointer
  21          volatile uint8_t xdata RX1_Buffer[RX1_LENGTH];  //rx buffer
  22          volatile bit B_RX1_OK;  //receive complete flag
  23          
  24          // private function
  25          static void SetTimer2Baudrate(uint16_t dat);
  26          
  27          //========================================================================
  28          // function:    SetTimer2Baudrate(u16 dat)
  29          // description: timer2 for buadrate generator
  30          // parameter:   dat:Timer2 reload
  31          // return:      void
  32          // version:     V1.0, 2018-1-11
  33          //========================================================================
  34          static void SetTimer2Baudrate(uint16_t dat){
  35   1        AUXR &= ~(1<<4);  //Timer stop
  36   1        AUXR &= ~(1<<3);  //Timer2 set As Timer
  37   1        AUXR |=  (1<<2);  //Timer2 set as 1T mode
  38   1        TH2 = dat / 256;
  39   1        TL2 = dat % 256;
  40   1        IE2  &= ~(1<<2);  //disable interrupt_
  41   1        AUXR |=  (1<<4);  //Timer run enable
  42   1      }
  43          
  44          //========================================================================
  45          // function:    UART1_config
  46          // description: init config UART1
  47          // parameter:   void
  48          // return:      void
  49          // version:     V1.0, 2018-1-11
  50          //========================================================================
  51          void  UART1_config(void){
  52   1        /*********** timer2 for baudrate *****************/
  53   1        AUXR |= 0x01;   //S1 BRT Use Timer2;
  54   1        SetTimer2Baudrate(65536UL - (MAIN_Fosc>>2) / Baudrate1);
C51 COMPILER V9.57.0.0   UART                                                              05/28/2018 21:11:51 PAGE 2   

  55   1      
  56   1        /*********** timer1 for baudrate *****************/
  57   1      /*  
  58   1        TR1 = 0;
  59   1        AUXR &= ~0x01;    //S1 BRT Use Timer1;
  60   1        AUXR |=  (1<<6);  //Timer1 set as 1T mode
  61   1        TMOD &= ~(1<<6);  //Timer1 set As Timer
  62   1        TMOD &= ~0x30;    //Timer1_16bitAutoReload;
  63   1        TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
  64   1        TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
  65   1        ET1 = 0;  //disable interrupt_
  66   1        INT_CLKO &= ~0x02;  //disable output clock
  67   1        TR1  = 1;
  68   1      */
  69   1      
  70   1        SCON = (SCON & 0x3f) | 0x40;  //mode 0x00: sync, 0x40: 8bit_variableBuad, 0x80: 9bit_fixedbuad  0xc0: 9bit
             -_variableBuad
  71   1        PS  = 1;  //interrupt_ priority
  72   1        ES  = 1;  //enable interrupt_
  73   1        REN = 1;  //enable receive
  74   1        P_SW1 &= 0x3f;
  75   1        P_SW1 |= 0x00;  //UART1 switch to, 0x00: P3.0_P3.1, 0x40: P3.6_P3.7, 0x80: P1.6_P1.7 (must use interal clo
             -ck)
  76   1        AUXR2 |=  (1<<4); //RXDLNTXD,1:link,0:normal
  77   1      
  78   1        B_TX1_Busy = 0;
  79   1        TX1_Read   = 0;
  80   1        TX1_Write  = 0;
  81   1      }
  82          
  83          //========================================================================
  84          // function:    uart1_handle
  85          // description: uart1 interrupt_ service handle
  86          // parameter:   void
  87          // return:      void
  88          // version:     V1.0, 2018-1-11
  89          //========================================================================
  90          void uart1_handle (void) interrupt 4{
  91   1        while(RI){  //"while" instead of "if" to use "break" later
  92   2          static uint8_t temp = 0;
  93   2          RI = 0;
  94   2          temp = SBUF;
  95   2          if(B_RX1_OK || '\r'==temp) break;
  96   2          RX1_Buffer[RX1_Write++] = temp;
  97   2          if('\n'==temp || (RX1_LENGTH-1)==RX1_Write){
  98   3            B_RX1_OK = 1;
  99   3            RX1_Buffer[RX1_Write] = '\0';
 100   3            RX1_Write = 0;
 101   3          }
 102   2        }
 103   1      
 104   1        if(TI){
 105   2          TI = 0;
 106   2          B_TX1_Busy = 0;
 107   2        }
 108   1      }
 109          
 110          //========================================================================
 111          // function:    UART1_RxProcess
 112          // description: check cmd to process
 113          // parameter:   void
 114          // return:      void
C51 COMPILER V9.57.0.0   UART                                                              05/28/2018 21:11:51 PAGE 3   

 115          // version:     V2.0, 2018-4-24
 116          //========================================================================
 117          void UART1_RxProcess(void){
 118   1        if(!B_RX1_OK) return;
 119   1        if(0 == strncmp(RX1_Buffer, CMD_Ver, strlen(CMD_Ver))){
 120   2          RX1_Write=0;
 121   2          B_RX1_OK=0;
 122   2          PrintString1(PRJ_NAME);
 123   2          PrintString1(SW_VER);
 124   2          PrintString1(HW_VER);
 125   2          PrintString1(__DATE__"\n");
 126   2          PrintString1(__TIME__"\n");
 127   2        }
 128   1        else if(0 == strncmp(RX1_Buffer, CMD_Write, strlen(CMD_Write))){
 129   2          RX1_Write=0;
 130   2          B_RX1_OK=0;
 131   2        }
 132   1        else if(0 == strncmp(RX1_Buffer, CMD_Read, strlen(CMD_Read))){
 133   2          RX1_Write=0;
 134   2          B_RX1_OK=0;
 135   2        }
 136   1      }
 137          
 138          //========================================================================
 139          // function:    UART1_TxProcess
 140          // description: check data_ to send in infinite loop
 141          // parameter:   void
 142          // return:      void
 143          // version:     V1.0, 2018-1-11
 144          //========================================================================
 145          void UART1_TxProcess(void){
 146   1        if((TX1_Read != TX1_Write) && (!B_TX1_Busy)){ //have data_ && uart idle
 147   2          SBUF = TX1_Buffer[TX1_Read];
 148   2          B_TX1_Busy = 1;
 149   2          if(++TX1_Read >= TX1_LENGTH)
 150   2            TX1_Read = 0;
 151   2        }
 152   1      }
 153          
 154          //========================================================================
 155          // function:    TX1_write2buff(uint8_t dat)
 156          // description: write data_ in buffer to wait send
 157          // parameter:   byte data_
 158          // return:      void
 159          // version:     V1.0, 2018-1-11
 160          //========================================================================
 161          void TX1_write2buff(uint8_t dat){
 162   1        TX1_Buffer[TX1_Write] = dat;
 163   1        if(++TX1_Write >= TX1_LENGTH)
 164   1          TX1_Write = 0;
 165   1      }
 166          
 167          //========================================================================
 168          // function:    PrintString1(uint8_t *str)
 169          // description: write a string to buffer
 170          // parameter:   string must be end of '\0'
 171          // return:      void
 172          // version:     V1.0, 2018-1-11
 173          //========================================================================
 174          void PrintString1(uint8_t* str){
 175   1        for (; *str != 0; str++)
 176   1          TX1_write2buff(*str); //end of '\0'
C51 COMPILER V9.57.0.0   UART                                                              05/28/2018 21:11:51 PAGE 4   

 177   1      }
 178          
 179          //========================================================================
 180          // function:    uart1 monitor
 181          // description: check uart1 timeout
 182          // parameter:   tick
 183          // return:      void
 184          // version:     V1.0, 2018-1-11
 185          //========================================================================
 186          void timeEv_UARTRx1Rst(uint8_t tick){
 187   1        static uint16_t uartrst_tick = 0;
 188   1        if(0 == RX1_Write){
 189   2          uartrst_tick = 0;
 190   2          return;
 191   2        }
 192   1        uartrst_tick += tick;
 193   1        if(uartrst_tick > UART1_OVTIME){
 194   2          uartrst_tick = 0;
 195   2          RX1_Write = 0;
 196   2        }
 197   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    473    ----
   CONSTANT SIZE    =     80    ----
   XDATA SIZE       =    218    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
