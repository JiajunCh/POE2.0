C51 COMPILER V9.57.0.0   POE_M                                                             05/25/2018 20:13:42 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE POE_M
OBJECT MODULE PLACED IN .\Objects\poe_m.obj
COMPILER INVOKED BY: D:\keil4_c51\C51\BIN\C51.EXE src\poe_m.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\poe_m.lst) TABS(2) OBJECT(.\Objects\poe_m.obj)

line level    source

   1          #include "i2c.h"
   2          #include "poe_m.h"
   3          #include "tt9980.h"
   4          #include "STC8xxxx.h"
   5          
   6          static uint16_t xdata pwrled_time = 0;  //led flash time
   7          
   8          static void set_l(uint8_t dev, uint8_t ch, bit val);
   9          
  10          //========================================================================
  11          // function:    WDG_config
  12          // description: start wdg
  13          // parameter:   void
  14          // return:      void
  15          // version:     V1.0, 2018-1-11
  16          //========================================================================
  17          void WDG_config(void){
  18   1        WDT_CONTR = D_EN_WDT | D_WDT_SCALE_128;
  19   1      }
  20          
  21          //========================================================================
  22          // function:    WDG_freed
  23          // description: wdg clear
  24          // parameter:   void
  25          // return:      void
  26          // version:     V1.0, 2018-1-11
  27          //========================================================================
  28          void WDG_freed(void){
  29   1        WDT_CONTR |= D_CLR_WDT;
  30   1      }
  31          
  32          //========================================================================
  33          // function:    timeEv_pwrled
  34          // description: pwr led flash
  35          // parameter:   tick
  36          // return:      void
  37          // version:     V2.0, 2018-4-25
  38          //========================================================================
  39          void timeEv_pwrled(uint8_t tick){
  40   1        static uint16_t pwrled_tick = 0;
  41   1        pwrled_tick += tick;
  42   1        if(PWR_LED_STOP == pwrled_time)
  43   1          return;
  44   1        if(pwrled_tick > pwrled_time){
  45   2          pwrled_tick = 0;
  46   2          PWR_LED = !PWR_LED;
  47   2        }
  48   1      }
  49          
  50          //========================================================================
  51          // function:    timeEv_getGsta
  52          // description: uart1 interrupt_ service handle
  53          // parameter:   tick
  54          // return:      void
C51 COMPILER V9.57.0.0   POE_M                                                             05/25/2018 20:13:42 PAGE 2   

  55          // version:     V2.0, 2018-4-25
  56          //========================================================================
  57          void timeEv_getGsta(uint8_t tick){
  58   1        static uint16_t xdata getg_tick = 0;
  59   1        static uint8_t xdata g_slave = 0;
  60   1        uint8_t state = 0, ch = 0;
  61   1        getg_tick += tick;
  62   1        if(getg_tick > T_GET_G){
  63   2          getg_tick = 0;
  64   2          i2c_read(TT9980x_ADDR+g_slave, PWR_STATE, &state, 1);
  65   2          if(G_ON != L_ON) state = ~state;
  66   2          for(ch=0; ch<MAX_CH; ch++)
  67   2            set_l(g_slave, ch, (bit)(state>>ch));
  68   2          if(++g_slave >= MAX_DEVICE)
  69   2            g_slave = 0;
  70   2        }
  71   1      }
  72          
  73          //========================================================================
  74          // function:    timeEv_getIU
  75          // description: get slave current and voltage
  76          // parameter:   tick
  77          // return:      void
  78          // version:     V2.0, 2018-5-25
  79          //========================================================================
  80          void timeEv_getIU(uint8_t tick){
  81   1        static uint16_t xdata getiu_tick = 0;
  82   1        uint8_t xdata iu_buf[(U4_H-U1_L+1)*MAX_DEVICE] = {0};
  83   1        getiu_tick += tick;
  84   1        if(getiu_tick > T_GET_IU){
  85   2          uint8_t dev = 0, ch = 0;
  86   2          uint32_t sum_iu = 0;
  87   2          uint8_t *pbuf = iu_buf;
  88   2          getiu_tick = 0;
  89   2          for(dev=0; dev<MAX_DEVICE; dev++){
  90   3            uint8_t ret = i2c_read(TT9980x_ADDR+dev, I1_L, iu_buf+dev*MAX_CH, U4_H-I1_L+1);
  91   3            if(ret) continue;
  92   3          }
  93   2          for(dev=0; dev<MAX_DEVICE; dev++){
  94   3            for(ch=0; ch<MAX_CH; ch++){
  95   4              sum_iu += (*(pbuf)|*(pbuf+1)) * (*(pbuf+2)|*(pbuf+3));
  96   4              pbuf += 4;
  97   4            }
  98   3          }
  99   2          sum_iu /= 1000000;
 100   2          if(sum_iu > IU_MAX100){
 101   3            pwrled_time = PWR_LED_MAX;
 102   3          }
 103   2          else if(sum_iu > IU_MAX95){
 104   3            pwrled_time = PWR_LED_FAST;
 105   3          }
 106   2          else if(sum_iu > IU_MAX75){
 107   3            pwrled_time = PWR_LED_SLOW;
 108   3          }
 109   2          else{
 110   3            pwrled_time = PWR_LED_STOP;
 111   3            PWR_LED = PWR_LED_OFF;
 112   3          }
 113   2        }
 114   1      }
 115          
 116          //========================================================================
C51 COMPILER V9.57.0.0   POE_M                                                             05/25/2018 20:13:42 PAGE 3   

 117          // function:    set_l
 118          // description: set led on/off
 119          // parameter:   device, channel, state
 120          // return:      void
 121          // version:     V2.0, 2018-4-25
 122          //========================================================================
 123          static void set_l(uint8_t dev, uint8_t ch, bit val){
 124   1        uint8_t l = 0xff;
 125   1        if(dev<MAX_DEVICE && ch<MAX_CH)
 126   1          l = dev*MAX_CH+ch;
 127   1        switch(l){
 128   2          case 0:  L1 = val; break;
 129   2          case 1:  L2 = val; break;
 130   2          case 2:  L3 = val; break;
 131   2          case 3:  L4 = val; break;
 132   2          case 4:  L5 = val; break;
 133   2          case 5:  L6 = val; break;
 134   2          case 6:  L7 = val; break;
 135   2          case 7:  L8 = val; break;
 136   2          case 8:  L9 = val; break;
 137   2          case 9:  L10 = val; break;
 138   2          case 10: L11 = val; break;
 139   2          case 11: L12 = val; break;
 140   2          case 12: L13 = val; break;
 141   2          case 13: L14 = val; break;
 142   2          case 14: L15 = val; break;
 143   2          case 15: L16 = val; break;
 144   2          case 16: L17 = val; break;
 145   2          case 17: L18 = val; break;
 146   2          case 18: L19 = val; break;
 147   2          case 19: L20 = val; break;
 148   2          case 20: L21 = val; break;
 149   2          case 21: L22 = val; break;
 150   2          case 22: L23 = val; break;
 151   2          case 23: L24 = val; break;
 152   2          default:break;
 153   2        }
 154   1      }
 155          
 156          
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    731    ----
   CONSTANT SIZE    =     56    ----
   XDATA SIZE       =      7      56
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
