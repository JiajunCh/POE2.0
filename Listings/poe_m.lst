C51 COMPILER V9.57.0.0   POE_M                                                             06/21/2018 11:31:43 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE POE_M
OBJECT MODULE PLACED IN .\Objects\poe_m.obj
COMPILER INVOKED BY: D:\keil4_c51\C51\BIN\C51.EXE src\poe_m.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\poe_m.lst) TABS(2) OBJECT(.\Objects\poe_m.obj)

line level    source

   1          #include "i2c.h"
   2          #include "uart.h"
   3          #include "poe_m.h"
   4          #include "tt9980.h"
   5          #include "STC8xxxx.h"
   6          
   7          static uint16_t xdata pwrled_time = 0;  //led flash time
   8          
   9          uint8_t i2c_salve[MAX_DEVICE] = {TT9980_1_4, TT9980_5_8, TT9980_9_12, TT9980_13_16};
  10          
  11          static void lowprio_off(void);
  12          static void highprio_on(void);
  13          static void set_led(uint8_t dev, uint8_t ch, bit val);
  14          static void set_allled(bit val);
  15          
  16          //========================================================================
  17          // function:    any delay function
  18          // description: delay time in while
  19          // parameter:   tick
  20          // return:      void
  21          // version:     V2.0, 2018-6-18
  22          //========================================================================
  23          void delay(uint8_t time){
  24   1        for(;time>0;time--);
  25   1      }
  26          void debug_delay(uint16_t time){
  27   1        for(;time>0;time--)
  28   1          delay(0xFF);
  29   1      }
  30          
  31          //========================================================================
  32          // function:    WDG_config
  33          // description: start wdg
  34          // parameter:   void
  35          // return:      void
  36          // version:     V1.0, 2018-1-11
  37          //========================================================================
  38          void WDG_config(void){
  39   1        WDT_CONTR = D_EN_WDT | D_WDT_SCALE_128;
  40   1      }
  41          
  42          //========================================================================
  43          // function:    WDG_freed
  44          // description: wdg clear
  45          // parameter:   void
  46          // return:      void
  47          // version:     V1.0, 2018-1-11
  48          //========================================================================
  49          void WDG_freed(void){
  50   1        WDT_CONTR |= D_CLR_WDT;
  51   1      }
  52          
  53          //========================================================================
  54          // function:    system_init
C51 COMPILER V9.57.0.0   POE_M                                                             06/21/2018 11:31:43 PAGE 2   

  55          // description: system init state
  56          // parameter:   void
  57          // return:      void
  58          // version:     V2.0, 2018-6-18
  59          //========================================================================
  60          void system_init(void){
  61   1        uint8_t xdata ch=0;
  62   1        
  63   1        set_allled(L_ON); //led on : all 
  64   1        PWR_LED = PWR_LED_ON; //pwrled on
  65   1        debug_delay(0x4FFF);
  66   1        set_allled(L_OFF);  //led off : all 
  67   1        PWR_LED = PWR_LED_OFF;  //pwrled off
  68   1        pwrled_time = PWR_LED_STOP;     //pwrled off
  69   1        
  70   1        ttall_write(WORK_MODE, MODE_HFAUTO);  //set work mode
  71   1        ttall_write(DET_EN, 0xFF);  //open det/class
  72   1        ttall_write(PWR_ON, 0x0F);  //power on
  73   1        for(ch=0; ch<MAX_CH; ch++)
  74   1          ttall_write(GPDM(ch), 0x01);  //set class level_2
  75   1        
  76   1        PrintString1(PRJ_NAME); //test
  77   1      }
  78          
  79          //========================================================================
  80          // function:    timeEv_pwrled
  81          // description: pwr led flash
  82          // parameter:   tick
  83          // return:      void
  84          // version:     V2.0, 2018-6-18
  85          //========================================================================
  86          void timeEv_pwrled(uint8_t tick){
  87   1        static uint16_t xdata pwrled_tick = 0;
  88   1        if(PWR_LED_STOP == pwrled_time)
  89   1          return;
  90   1        pwrled_tick += tick;
  91   1        if(pwrled_tick > pwrled_time){
  92   2          pwrled_tick = 0;
  93   2          PWR_LED = !PWR_LED;
  94   2        }
  95   1      }
  96          
  97          //========================================================================
  98          // function:    timeEv_getGsta
  99          // description: uart1 interrupt_ service handle
 100          // parameter:   tick
 101          // return:      void
 102          // version:     V2.0, 2018-6-18
 103          //========================================================================
 104          void timeEv_getGsta(uint8_t tick){
 105   1        static uint16_t xdata getg_tick = 0;
 106   1        static uint8_t dev = 0;
 107   1        uint8_t state = 0, ch = 0, ret = 0;
 108   1        getg_tick += tick;
 109   1        if(getg_tick > T_GET_G){
 110   2          getg_tick = 0;
 111   2          TX1_write2buff('g');  //test
 112   2          ret = tt_read(dev, PWR_STATE, &state);
 113   2          if(ret){
 114   3            TX1_write2buff('-');  //test
 115   3            state = (G_OFF ? 0xFF : 0x00);  //if i2c_err, then led_off
 116   3          }
C51 COMPILER V9.57.0.0   POE_M                                                             06/21/2018 11:31:43 PAGE 3   

 117   2          else{
 118   3            TX1_write2buff('|');  //test
 119   3          }
 120   2          for(ch=0; ch<MAX_CH; ch++){
 121   3            if(((state>>ch)&0x01) == G_ON)
 122   3              set_led(dev, ch, L_ON);
 123   3            else
 124   3              set_led(dev, ch, L_OFF);
 125   3          }
 126   2          if((++dev) >= MAX_DEVICE)
 127   2            dev = 0;
 128   2          TX1_write2buff('\n'); //test
 129   2        }
 130   1      }
 131          
 132          //========================================================================
 133          // function:    timeEv_getIU
 134          // description: get slave current and voltage
 135          // parameter:   tick
 136          // return:      void
 137          // version:     V2.0, 2018-6-18
 138          //========================================================================
 139          void timeEv_getIU(uint8_t tick){
 140   1        static uint16_t xdata getiu_tick = 0;
 141   1        uint8_t xdata ret = 0;
 142   1        getiu_tick += tick;
 143   1        if(getiu_tick > T_GET_IU){
 144   2          uint8_t dev = 0, ch = 0;
 145   2          uint32_t sum_iu = 0;
 146   2          getiu_tick = 0;
 147   2          TX1_write2buff('i');//test
 148   2          for(dev=0; dev<MAX_DEVICE; dev++){      //calculate sum of i*u
 149   3            uint8_t pbuf[U4_H-U1_L+1] = {0};
 150   3            ret = i2c_read(i2c_salve[dev], I1_L, pbuf, U4_H-I1_L+1);
 151   3            if(!ret){
 152   4              TX1_write2buff('|');//test
 153   4              for(ch=0; ch<MAX_CH; ch++)
 154   4                sum_iu += ((uint16_t)pbuf[ch<<2] | ((uint16_t)pbuf[(ch<<2)+1]<<8));
 155   4            }
 156   3            else
 157   3              TX1_write2buff('-');//test
 158   3          }
 159   2          if(sum_iu > IU_MAX){      // >100%
 160   3            pwrled_time = PWR_LED_MAX;
 161   3            lowprio_off();
 162   3            TX1_write2buff('M');//test
 163   3          }
 164   2          else if(sum_iu > IU_MID){ // >95%
 165   3            pwrled_time = PWR_LED_FAST;
 166   3            TX1_write2buff('m');//test
 167   3          }
 168   2          else if(sum_iu > IU_NOR){ // >75%
 169   3            pwrled_time = PWR_LED_SLOW;
 170   3            ttall_write(DET_EN, 0xFF);
 171   3            highprio_on();
 172   3            TX1_write2buff('S');//test
 173   3          }
 174   2          else{                     // <=75%
 175   3            pwrled_time = PWR_LED_STOP;
 176   3            PWR_LED = PWR_LED_OFF;
 177   3            ttall_write(DET_EN, 0xFF);
 178   3            highprio_on();
C51 COMPILER V9.57.0.0   POE_M                                                             06/21/2018 11:31:43 PAGE 4   

 179   3            TX1_write2buff('s');//test
 180   3          }
 181   2          TX1_write2buff('\n');//test
 182   2        }
 183   1      }
 184          
 185          //========================================================================
 186          // function:    lowprio_off
 187          // description: close gate witch is ON and lower previlige
 188          // parameter:   void
 189          // return:      closed flag
 190          // version:     V1.0, 2018-6-18
 191          //========================================================================
 192          static void lowprio_off(void){
 193   1        uint8_t xdata ret = 0, dev = 0, ch = 0;
 194   1        uint8_t pwr_state = 0, g_state = 0;
 195   1        for(dev=MAX_DEVICE-1; dev>=0; dev--){
 196   2          ret = tt_read(dev, PWR_STATE, &pwr_state);  //read pwr state
 197   2          if(ret) continue;
 198   2          for(ch=MAX_CH-1; ch>=0; ch--){
 199   3            if((pwr_state>>ch)&0x01 == G_ON){   //get pwr_on channal
 200   4              g_state |= (0x10<<ch);
 201   4              tt_write(dev, PWR_ON, g_state); //set pwr on/off
 202   4              return;
 203   4            }
 204   3          }
 205   2        }
 206   1      }
 207          
 208          //========================================================================
 209          // function:    highprio_on
 210          // description: open gate witch is OFF and higher previlige
 211          // parameter:   void
 212          // return:      closed flag
 213          // version:     V1.0, 2018-6-18
 214          //========================================================================
 215          static void highprio_on(void){
 216   1        uint8_t xdata ret = 0, dev = 0, ch = 0;
 217   1        uint8_t pwr_state = 0, g_state = 0;
 218   1        for(dev=0; dev<MAX_DEVICE; dev++){
 219   2          ret = tt_read(dev, PWR_STATE, &pwr_state);  //read pwr state
 220   2          if(ret) continue;
 221   2          for(ch=0; ch<MAX_CH; ch++){
 222   3            if(((pwr_state>>ch)&0x01) == G_OFF){
 223   4              g_state |= (0x01<<ch);
 224   4              tt_write(dev, PWR_ON, g_state); //set pwr on/off
 225   4              return;
 226   4            }
 227   3          }
 228   2        }
 229   1      }
 230          
 231          //========================================================================
 232          // function:    set_led
 233          // description: set led on/off
 234          // parameter:   device, channel, state
 235          // return:      void
 236          // version:     V2.0, 2018-6-18
 237          //========================================================================
 238          static void set_led(uint8_t dev, uint8_t ch, bit val){
 239   1        uint8_t l = 0xff;
 240   1        if(dev<6 && ch<MAX_CH)
C51 COMPILER V9.57.0.0   POE_M                                                             06/21/2018 11:31:43 PAGE 5   

 241   1          l = dev*MAX_CH+ch;
 242   1        l += 8;
 243   1        switch(l){
 244   2          case 0:  L1 = val; break;
 245   2          case 1:  L2 = val; break;
 246   2          case 2:  L3 = val; break;
 247   2          case 3:  L4 = val; break;
 248   2          case 4:  L5 = val; break;
 249   2          case 5:  L6 = val; break;
 250   2          case 6:  L7 = val; break;
 251   2          case 7:  L8 = val; break;
 252   2          case 8:  L9 = val; break;
 253   2          case 9:  L10 = val; break;
 254   2          case 10: L11 = val; break;
 255   2          case 11: L12 = val; break;
 256   2          case 12: L13 = val; break;
 257   2          case 13: L14 = val; break;
 258   2          case 14: L15 = val; break;
 259   2          case 15: L16 = val; break;
 260   2          case 16: L17 = val; break;
 261   2          case 17: L18 = val; break;
 262   2          case 18: L19 = val; break;
 263   2          case 19: L20 = val; break;
 264   2          case 20: L21 = val; break;
 265   2          case 21: L22 = val; break;
 266   2          case 22: L23 = val; break;
 267   2          case 23: L24 = val; break;
 268   2          default:break;
 269   2        }
 270   1      }
 271          
 272          //========================================================================
 273          // function:    set_lalled
 274          // description: set led on/off
 275          // parameter:   state
 276          // return:      void
 277          // version:     V2.0, 2018-6-18
 278          //========================================================================
 279          static void set_allled(bit val){
 280   1        uint8_t dev, ch;
 281   1        for(dev=0; dev<MAX_DEVICE; dev++)
 282   1          for(ch=0; ch<MAX_CH; ch++)
 283   1            set_led(dev, ch, val);          //set led all 
 284   1      }
 285          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1149    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =      8       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
